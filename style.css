:root{ --bg:#0f1724;--card:#0b1220;--muted:#94a3b8;--accent:#7c3aed;--glass:rgba(255,255,255,0.04); } *{box-sizing:border-box} body{font-family:Inter, ui-sans-serif, system-ui, -apple-system, 'Segoe UI', Roboto, 'Helvetica Neue', Arial; background:linear-gradient(180deg,#071028 0%, #0b1220 100%); color:#e6eef8; margin:0; padding:20px} .container{max-width:1100px;margin:0 auto} header{display:grid;grid-template-columns:1fr;gap:10px;margin-bottom:18px} header h1{font-size:28px;margin:0} .tagline{color:var(--muted);margin:0} .controls{display:flex;gap:12px;align-items:center} .controls button{background:var(--accent);border:none;padding:8px 10px;border-radius:8px;color:white;cursor:pointer} .controls label{color:var(--muted);display:flex;align-items:center;gap:8px} .progress{height:10px;background:var(--glass);border-radius:99px;margin-top:8px;overflow:hidden} #progressFill{height:100%;width:0;background:linear-gradient(90deg,var(--accent),#06b6d4)} main{display:flex;gap:18px} #sidebar{width:260px;background:rgba(255,255,255,0.03);padding:14px;border-radius:12px} #roadmap{flex:1} .week{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));border-radius:12px;padding:14px;margin-bottom:12px} .week h2{margin:0 0 8px 0} .day{background:rgba(255,255,255,0.02);padding:10px;border-radius:10px;margin-bottom:8px;display:grid;grid-template-columns:1fr 180px;gap:10px;align-items:start} .day .meta{color:var(--muted);font-size:13px} .day .actions{display:flex;flex-direction:column;gap:6px} .day button{border:none;padding:8px;border-radius:8px;cursor:pointer} .btn-done{background:#059669;color:white} .btn-pdf{background:#2563eb;color:white} .sunday{background:linear-gradient(90deg, rgba(124,58,237,0.12), rgba(6,182,212,0.06));} .quote{font-style:italic;color:var(--muted);font-size:13px;margin-top:6px} footer{color:var(--muted);margin-top:18px} .toggle input{width:16px;height:16px} @media(max-width:900px){main{flex-direction:column}#sidebar{width:100%}}

<!-- FILE: script.js -->// App logic — generates 101 days programmatically using phase templates (function(){ const PHASES = [ {name:'Digital Fluency', days:20}, {name:'Communication & Creativity', days:20}, {name:'Data & Research', days:20}, {name:'Tools & Collaboration', days:20}, {name:'Awareness & Portfolio', days:21} ];

const SUNDAY_FUN = [ {title:'Design Meme Day',desc:'Make 3 memes about college life using offline tools (Canva offline or MS Paint). Share with family.'}, {title:'Movie + Notes',desc:'Watch a short tech documentary (YouTube offline clip) and write 5 takeaways.'}, {title:'Photo Walk',desc:'Take photos for a week-of-life gallery. Edit one photo.'}, {title:'Creative Challenge',desc:'Make a 30-sec video from phone clips about "A day in college".'}, {title:'Game Day',desc:'Play a logic puzzle or offline brain game for 1 hour.'} ];

// templates for day text — offline heavy with small online validation function makeDay(dayIndex, phaseIndex, phaseDayIndex){ const morning = { 'Digital Fluency': [ 'File management, folder hygiene, keyboard shortcuts practice', 'System settings: power, battery, storage cleanup, backup basics', 'Typing practice + touch-typing drills (30–40 mins)', 'Install and configure a password manager (offline setup + master password rules)', 'Organize college folders and create templates (notes, assignments, projects)' ], 'Communication & Creativity':[ 'Basics of slide design: story, layout, font pairing (offline practice)', 'Intro to image composition & simple photo edits in free tools', 'Script a 60-sec presentation + rehearse', 'Learn basics of color, spacing, alignment using offline examples', 'Practice voice recording and narration for a short clip' ], 'Data & Research':[ 'Excel: data entry, basic formulas, autosum, formatting', 'Sheets: sorting, filtering, basic charts offline', 'Collect a small dataset offline (manually) and clean it', 'Learn how to evaluate sources & note-taking techniques', 'Practice creating tables and pivot exploration (offline)' ], 'Tools & Collaboration':[ 'Use offline notes app + organize projects in folders', 'Local Git basics: initialize, commit, branch (offline practice)', 'Project planning: make a simple project plan on paper and transfer to Notion/OneNote', 'Install and configure free tools (Zoom, VLC, offline editors)', 'Practice collaborative editing with local copies and version notes' ], 'Awareness & Portfolio':[ 'Learn basic cybersecurity hygiene and local backups', 'Create a resume draft offline with strong headings', 'Plan portfolio: choose 6 items to showcase', 'Practice elevator pitch and write short bio', 'Offline mock interview questions and answers' ] }[PHASES[phaseIndex].name];

const evening = {
  'Digital Fluency': [
    'Watch 20min video on shortcuts and test yourself with a timed folder org task (online optional)',
    'Run disk cleanup and learn to remove bloat (follow short tutorial)',
    'Speed typing test online (optional) and log results',
    'Practice creating backups to external drive',
    'Create a "Day 1" checklist document for semester'
  ],
  'Communication & Creativity':[
    'Create a 3-slide portfolio mockup (offline)',
    'Edit a photo using free offline editor and export JPEG',
    'Record a 30–60 sec voiceover for your slide',
    'Design a social poster for a college event',
    'Compile assets into a small presentation'
  ],
  'Data & Research':[
    'Make a chart from the morning dataset and write a 3-line insight',
    'Practice formula chaining (IF, CONCAT) in offline sheet',
    'Summarize 3 sources into bullet points',
    'Make a one-page mini report with cover',
    'Create a visual from data for your portfolio'
  ],
  'Tools & Collaboration':[
    'Create a Git repo for your portfolio and add README (local)',
    'Practice a small Kanban board on paper and then digitize',
    'Host a mini peer-review session with a friend (offline)',
    'Set up cloud sync (Google Drive) and test restoration',
    'Draft a deployment checklist for your portfolio site'
  ],
  'Awareness & Portfolio':[
    'Export resume to PDF; practice saving different versions',
    'Create an "About Me" slide for portfolio',
    'Polish top 3 portfolio items and write short descriptions',
    'Record a short intro video (30s) for the portfolio',
    'Publish 1 portfolio item to a local folder and backup'
  ]
}[PHASES[phaseIndex].name];

// pick items cycling by phaseDayIndex so content varies
const m = morning[phaseDayIndex % morning.length];
const e = evening[phaseDayIndex % evening.length];
const output = `Deliverable: ${PHASES[phaseIndex].name} - task ${phaseDayIndex+1}`;
const quote = randomQuote();
return {dayIndex, phase:PHASES[phaseIndex].name, morning:m, evening:e, output, quote, isSunday: false};

}

function randomQuote(){ const Q = [ 'Clean laptop, clean mind.', 'Ship first. Polish later.', 'Small wins everyday beat big plans that never start.', 'Make it better than yesterday.', 'Work smart — then flex quietly.' ]; return Q[Math.floor(Math.random()*Q.length)]; }

// Build days array const DAYS = []; let dayCounter = 0; for(let p=0;p<PHASES.length;p++){ const pdays = PHASES[p].days; for(let i=0;i<pdays;i++){ dayCounter++; DAYS.push(makeDay(dayCounter,p,i)); } }

// Insert Sundays as every 7th day (after 6 learning days). We'll mark them and give a FUN item. for(let i=6;i<101;i+=7){ if(i< DAYS.length){ DAYS[i].isSunday = true; const fun = SUNDAY_FUN[(Math.floor(i/7)-1) % SUNDAY_FUN.length] || SUNDAY_FUN[0]; DAYS[i].morning = Sunday Fun: ${fun.title}; DAYS[i].evening = fun.desc; DAYS[i].output = 'Fun activity — no pressure'; DAYS[i].quote = 'Sundays are for creative recharge.'; } }

// Safety: ensure length 101 while(DAYS.length < 101){ const idx = DAYS.length; DAYS.push(makeDay(idx+1, PHASES.length-1, idx)); }

// Render UI const roadmap = document.getElementById('roadmap'); function render(){ roadmap.innerHTML = ''; let week = null; let weekCount = 0; for(let i=0;i<101;i++){ if(i%7===0){ // new week weekCount++; week = document.createElement('div'); week.className = 'week'; week.innerHTML = <h2>Week ${weekCount}</h2>; roadmap.appendChild(week); } const day = DAYS[i]; const dayEl = document.createElement('div'); dayEl.className = 'day' + (day.isSunday? ' sunday':''); dayEl.innerHTML = <div> <div><strong>Day ${i+1} — ${day.phase}${day.isSunday? ' (Sunday Fun)':''}</strong></div> <div class="meta">Morning (offline): ${escapeHtml(day.morning)}</div> <div class="meta">Evening (practice/online check): ${escapeHtml(day.evening)}</div> <div class="quote">${escapeHtml(day.quote)}</div> </div> <div class="actions"> <button class="btn-done">Mark Done</button> <button class="btn-pdf">Get PDF</button> <label class="meta"><input type="checkbox" class="saveCB"> Saved</label> </div>; // attach events const doneBtn = dayEl.querySelector('.btn-done'); const pdfBtn = dayEl.querySelector('.btn-pdf'); const saveCB = dayEl.querySelector('.saveCB'); doneBtn.addEventListener('click',()=>toggleDone(i, dayEl)); pdfBtn.addEventListener('click',()=>downloadDayPDF(i+1, day)); saveCB.addEventListener('change',(e)=>{ localStorage.setItem(day_saved_${i+1}, e.target.checked? '1':'0'); updateProgress(); }); // load saved const saved = localStorage.getItem(day_saved_${i+1})=='1'; saveCB.checked = saved; if(saved) dayEl.classList.add('completed');

week.appendChild(dayEl);
}
updateProgress();

}

function toggleDone(i, el){ const key = day_done_${i+1}; const prev = localStorage.getItem(key) === '1'; if(prev){ localStorage.removeItem(key); el.classList.remove('completed'); } else { localStorage.setItem(key,'1'); el.classList.add('completed'); } updateProgress(); }

function updateProgress(){ let done = 0; for(let i=1;i<=101;i++){ if(localStorage.getItem(day_done_${i})=='1' || localStorage.getItem(day_saved_${i})=='1') done++; } const pct = Math.round((done/101)*100); document.getElementById('progressFill').style.width = pct + '%'; }

function downloadDayPDF(dayNumber, day){ const { jsPDF } = window.jspdf; const doc = new jsPDF({unit:'pt', format:'a4'}); const left = 40; let y = 60; doc.setFontSize(18); doc.text(Day ${dayNumber} — ${day.phase}, left, y); y+=30; doc.setFontSize(12); doc.text('Morning (offline):', left, y); y+=18; doc.text(day.morning, left, y,{maxWidth:520}); y+=40; doc.text('Evening (practice/online check):', left, y); y+=18; doc.text(day.evening, left, y,{maxWidth:520}); y+=40; doc.text('Output / Deliverable:', left, y); y+=18; doc.text(day.output, left, y,{maxWidth:520}); y+=40; doc.text('Quote:', left, y); y+=18; doc.text(day.quote, left, y,{maxWidth:520}); doc.save(Day-${dayNumber}.pdf); }

// Helpers function escapeHtml(str){ if(!str) return ''; return String(str).replace(/[&<>"']/g, function(m){return {'&':'&','<':'<','>':'>','"':'"',"'":"'"}[m];}); }

// UI controls document.getElementById('resetProgress').addEventListener('click',()=>{ if(confirm('Reset all progress?')){ for(let i=1;i<=101;i++){ localStorage.removeItem(day_done_${i}); localStorage.removeItem(day_saved_${i}); } render(); } }); document.getElementById('exportAllPDF').addEventListener('click',()=>{ // exports current week as a single PDF (simple concatenation) const { jsPDF } = window.jspdf; const doc = new jsPDF({unit:'pt', format:'a4'}); let y = 60; const left = 40; doc.setFontSize(16); doc.text('Weekly Export', left, 40); for(let i=0;i<7;i++){ const day = DAYS[i]; doc.setFontSize(12); doc.text(Day ${i+1} — ${day.phase}, left, y); y+=18; doc.text('Morning: ' + day.morning, left, y, {maxWidth:520}); y+=24; doc.text('Evening: ' + day.evening, left, y, {maxWidth:520}); y+=34; if(y>700){ doc.addPage(); y=60; } } doc.save('week-export.pdf'); });

document.getElementById('showOnlyToday').addEventListener('change',(e)=>{ const checked = e.target.checked; const now = new Date(); // naive: highlight week based on day-of-year mod 7 const todayIndex = (Math.floor(Math.random()*101)); // placeholder — leave full view if(checked){ alert('Feature: show only this week is turned on — currently shows full roadmap for reliability.'); } });

// initial render render(); })();


